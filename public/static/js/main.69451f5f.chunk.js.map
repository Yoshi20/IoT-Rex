{"version":3,"sources":["components/SiteHeader/SiteHeader.module.scss","screens/LoginScreen/LoginScreen.module.scss","screens/DeviceBoard/DeviceBoard.module.scss","serviceWorker.js","store/modules/user.js","screens/LoginScreen/index.jsx","components/SiteHeader/index.jsx","screens/Dashboard/index.jsx","screens/DeviceBoard/index.jsx","routers/AppRouter.jsx","store/configureStore.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","USER_LOGIN","USER_LOGOUT","initialState","loggedIn","LoginScreen","classes","this","props","className","style","login","TextField","id","textField","label","margin","type","onChange","e","InputProps","input","resize","InputLabelProps","root","autoComplete","Button","variant","color","button","onClick","userLogin","React","Component","mapDispatchToProps","connect","withStyles","marginTop","padding","width","fontSize","SiteHeader","mainTitle","subTitle","styles","site_header","site_header__sub","site_header__main","Dashboard","state","DeviceBoard","device_cards","AppRouter","exact","path","component","user","reducer","combineReducers","configureStore","middleware","ReduxThunk","logger","createStore","applyMiddleware","theme","createMuiTheme","palette","primary","main","secondary","store","ReactDOM","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,WAAa,+BAA+B,YAAc,gCAAgC,kBAAoB,sCAAsC,iBAAmB,uC,wCCAzLD,EAAOC,QAAU,CAAC,MAAQ,6B,mBCA1BD,EAAOC,QAAU,CAAC,aAAe,kCAAkC,aAAe,oC,2MCW9DC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uqBCjBN,IAAMC,EAAa,aACbC,EAAc,cAEdC,EAAe,CACnBC,UAAU,G,2BCyBNC,E,iLACM,IAAD,OACCC,EAAYC,KAAKC,MAAjBF,QAKR,OACE,yBAAKG,UAAWC,IAAMC,OACpB,wBAAIF,UAAU,cAAd,SACA,6BACE,kBAACG,EAAA,EAAD,CACEC,GAAG,iBACHJ,UAAWH,EAAQQ,UACnBC,MAAM,SACNC,OAAO,SACPC,KAAK,QACLC,SAAU,SAAAC,KAGVC,WAAY,CACVd,QAAS,CACPe,MAAOf,EAAQgB,SAGnBC,gBAAiB,CACfjB,QAAS,CACPkB,KAAMlB,EAAQgB,YAKtB,6BACE,kBAACV,EAAA,EAAD,CACEC,GAAG,0BACHE,MAAM,WACNN,UAAWH,EAAQQ,UACnBG,KAAK,WACLQ,aAAa,mBACbT,OAAO,SACPE,SAAU,SAAAC,KAGVC,WAAY,CACVd,QAAS,CACPe,MAAOf,EAAQgB,SAGnBC,gBAAiB,CACfjB,QAAS,CACPkB,KAAMlB,EAAQgB,YAKtB,kBAACI,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNtB,QAAS,CACPS,MAAOT,EAAQgB,QAEjBb,UAAWH,EAAQuB,OACnBC,QAAS,kBAAM,EAAKtB,MAAMuB,cAP5B,c,GAvDkBC,IAAMC,WA2EhC,IAAMC,EAAqB,CACzBH,UDpFK,WACL,MAAO,CAAEd,KAAMhB,KCsFFkC,eARf,WACE,MAAO,KASPD,EAFaC,CAGbC,YAjGa,CACbP,OAAQ,CACNQ,UAAW,OACXC,QAAS,SACTC,MAAO,KAETzB,UAAW,CACTuB,UAAW,OACXE,MAAO,KAETjB,OAAQ,CACNkB,SAAU,SAsFZJ,CAAmB/B,I,iBCvGN,SAASoC,EAAT,GAA8C,IAAxBC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,SAC9C,OACE,yBAAKlC,UAAWmC,IAAOC,aACrB,yBAAKpC,UAAWmC,IAAOE,kBAAmBH,EAA1C,QACA,yBAAKlC,UAAWmC,IAAOG,mBAAoBL,I,gBCD3CM,E,iLAEF,OACE,yBAAKvC,UAAU,kBACb,kBAACgC,EAAD,CAAYC,UAAU,YAAYC,SAAS,uB,GAJ3BX,IAAMC,WAc9B,IAEeE,eANf,SAAyBc,GACvB,MAAO,KAGkB,GAEZd,CAGba,G,iBCnBIE,E,iLAEF,OACE,yBAAKzC,UAAU,kBACb,kBAACgC,EAAD,CAAYC,UAAU,eACtB,yBAAKjC,UAAWmC,IAAOO,cAAvB,oB,GALkBnB,IAAMC,WAehC,IAEeE,eANf,SAAyBc,GACvB,MAAO,KAGkB,GAEZd,CAGbe,GClBIE,G,uLAEF,OACE,kBAAC,IAAD,KACE,yBAAK3C,UAAU,YACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE4C,OAAK,EACLC,KAAK,IACLC,UAAWhD,KAAKC,MAAMJ,SAAW4C,EAAY3C,IAE/C,kBAAC,IAAD,CAAOiD,KAAK,gBAAgBC,UAAWL,W,GAX3BlB,IAAMC,YAyB9B,IAEeE,eARf,YACE,MAAO,CACL/B,SAF+B,EAARoD,KAERpD,YAIQ,GAEZ+B,CAGbiB,G,iCCtCIK,EAAUC,YAAgB,CAC9BF,KNEa,WAAqD,IAApCP,EAAmC,uDAA3B9C,EACtC,QADiE,uDAAJ,IAC9Cc,MACb,KAAKhB,EACH,OAAO,EAAP,GAAYgD,EAAZ,CAAmB7C,UAAU,IAC/B,KAAKF,EACH,OAAO,EAAP,GAAY+C,EAAZ,CAAmB7C,UAAU,IAE/B,QACE,OAAO6C,MMKEU,EAZQ,SAAAxD,GACrB,IAAMyD,EAAa,CAACC,IAAYC,KAQhC,OANcC,YACZN,EACAtD,EACA6D,IAAe,WAAf,EAAmBJ,KCAjBK,G,MAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CAAEC,KAAM,WACjBC,UAAW,CAAED,KAAM,eAIjBE,EAAQZ,IAEda,IAASC,OACP,kBAAC,IAAD,CAAUF,MAAOA,GACf,kBAACG,EAAA,EAAD,CAAeT,MAAOA,GACpB,kBAAC,EAAD,QAGJU,SAASC,eAAe,SRkGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.69451f5f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header_big\":\"SiteHeader_header_big__1pk4x\",\"site_header\":\"SiteHeader_site_header__kDwIb\",\"site_header__main\":\"SiteHeader_site_header__main__5UDnc\",\"site_header__sub\":\"SiteHeader_site_header__sub__30e5S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"LoginScreen_login__1kYxy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"screen_title\":\"DeviceBoard_screen_title__1lSMl\",\"device_cards\":\"DeviceBoard_device_cards__3_W0z\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* Actions */\nconst USER_LOGIN = 'USER_LOGIN';\nconst USER_LOGOUT = 'USER_LOGOUT';\n\nconst initialState = {\n  loggedIn: false,\n};\n\n/* Reducer */\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case USER_LOGIN:\n      return { ...state, loggedIn: true };\n    case USER_LOGOUT:\n      return { ...state, loggedIn: false };\n\n    default:\n      return state;\n  }\n}\n\n/* Action Creators */\nexport function userLogin() {\n  return { type: USER_LOGIN };\n}\n\nexport function userLogout() {\n  return { type: USER_LOGOUT };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\n\n/* Components */\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\n/* Store */\nimport { userLogin } from '../../store/modules/user';\n\n/* Styles */\nimport '../../styles/typography.scss';\nimport style from './LoginScreen.module.scss';\n\nconst styles = {\n  button: {\n    marginTop: '8rem',\n    padding: '0 4rem',\n    width: 400,\n  },\n  textField: {\n    marginTop: '4rem',\n    width: 400,\n  },\n  resize: {\n    fontSize: '2rem',\n  },\n};\n\nclass LoginScreen extends React.Component {\n  render() {\n    const { classes } = this.props;\n\n    // let eMail = '';\n    // let password = '';\n\n    return (\n      <div className={style.login}>\n        <h1 className=\"header_big\">Login</h1>\n        <div>\n          <TextField\n            id=\"standard-basic\"\n            className={classes.textField}\n            label=\"E-Mail\"\n            margin=\"normal\"\n            type=\"email\"\n            onChange={e => {\n              /*eMail = e.target.value*/\n            }}\n            InputProps={{\n              classes: {\n                input: classes.resize,\n              },\n            }}\n            InputLabelProps={{\n              classes: {\n                root: classes.resize,\n              },\n            }}\n          />\n        </div>\n        <div>\n          <TextField\n            id=\"standard-password-input\"\n            label=\"Password\"\n            className={classes.textField}\n            type=\"password\"\n            autoComplete=\"current-password\"\n            margin=\"normal\"\n            onChange={e => {\n              /*password = e.target.value*/\n            }}\n            InputProps={{\n              classes: {\n                input: classes.resize,\n              },\n            }}\n            InputLabelProps={{\n              classes: {\n                root: classes.resize,\n              },\n            }}\n          />\n        </div>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          classes={{\n            label: classes.resize,\n          }}\n          className={classes.button}\n          onClick={() => this.props.userLogin()}\n        >\n          Login\n        </Button>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps() {\n  return {};\n}\n\nconst mapDispatchToProps = {\n  userLogin,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(LoginScreen));\n","import React from 'react';\n\n/* Components */\n\n/* Store */\n\n/* Styles */\nimport styles from './SiteHeader.module.scss';\n\nexport default function SiteHeader({ mainTitle, subTitle }) {\n  return (\n    <div className={styles.site_header}>\n      <div className={styles.site_header__sub}>{subTitle}&nbsp;</div>\n      <div className={styles.site_header__main}>{mainTitle}</div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\n/* Components */\nimport SiteHeader from '../../components/SiteHeader';\n\n/* Store */\n\n/* Styles */\nimport '../../styles/layout.scss';\nimport './Dashboard.module.scss';\n\nclass Dashboard extends React.Component {\n  render() {\n    return (\n      <div className=\"screen_wrapper\">\n        <SiteHeader mainTitle=\"Dashboard\" subTitle=\"Organisatioin\" />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nconst mapDispatchToProps = {};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Dashboard);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\n/* Components */\nimport SiteHeader from '../../components/SiteHeader';\n\n/* Store */\n\n/* Styles */\nimport '../../styles/layout.scss';\nimport styles from './DeviceBoard.module.scss';\n\nclass DeviceBoard extends React.Component {\n  render() {\n    return (\n      <div className=\"screen_wrapper\">\n        <SiteHeader mainTitle=\"My Devices\" />\n        <div className={styles.device_cards}>Device Card</div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nconst mapDispatchToProps = {};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DeviceBoard);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n/* Components */\nimport LoginScreen from '../screens/LoginScreen';\nimport Dashboard from '../screens/Dashboard';\nimport DeviceBoard from '../screens/DeviceBoard';\n\n/* Store */\n\n/* Styles */\nimport './AppRouter.scss';\n\nclass AppRouter extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"app_root\">\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              component={this.props.loggedIn ? Dashboard : LoginScreen}\n            />\n            <Route path=\"/device-board\" component={DeviceBoard} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nfunction mapStateToProps({ user }) {\n  return {\n    loggedIn: user.loggedIn,\n  };\n}\n\nconst mapDispatchToProps = {};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AppRouter);\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport user from './modules/user';\n\nconst reducer = combineReducers({\n  user,\n});\n\nconst configureStore = initialState => {\n  const middleware = [ReduxThunk, logger];\n\n  const store = createStore(\n    reducer,\n    initialState,\n    applyMiddleware(...middleware)\n  );\n\n  return store;\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\n/* Components */\nimport AppRouter from './routers/AppRouter';\n\n/* Store */\nimport configureStore from './store/configureStore';\n\n/* Styles */\nimport './index.css';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: '#6d7993' }, // Purple and green play nicely together.\n    secondary: { main: '#054b1a' }, // This is just green.A700 as hex.\n  },\n});\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <AppRouter />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}